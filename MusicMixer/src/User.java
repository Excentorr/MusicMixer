/**
 *
 */


/**
 * @author Het Patel
 * Date: January 2024
 * Description: This class represents a user holding their first name, last name, email, username, password, account ID,
 * 				and account type.
 * 
 * Method List:
 * - public User() - default constructor
 * - public User(String first, String last, String email, String username, String password, char type) - overloaded constructor
 * - public String genAccountID() - generates a random 16-digit account ID
 * - public String getAccountID() - gets the account ID
 * - public String getFirstName() - gets the first name
 * - public String getLastName() - gets the last name
 * - public String getEmail() - gets the email
 * - public String getPassword() - gets the password
 * - public String getUsername() - gets the username
 * - public char getAccountType() - gets the account type
 * - public void setFirstName(String firstName) - sets the first name
 * - public void setLastName(String lastName) - sets the last name
 * - public void setEmail(String email) - sets the email
 * - public void setPassword(String password) - sets the password
 * - public void setUsername(String username) - sets the username
 * - public void setAccountType(char type) - sets the account type
 * - public void processString(String record) - processes a record
 * - public String toString() - provides a string representation of the user
 * - public static void main(String[] args) - self-testing main method
 */
public class User {

	/**
	 * Instance Data
	 */
	private String firstName, lastName;
	private String email;
	private String username, password;
	private String accountID;
	private char accountType;


	// Default constructor
	public User() {
		this.firstName = "";
		this.lastName = "";
		this.email = "";
		this.password = "";
		this.username = "";
		this.accountID = genAccountID();
		this.accountType = 0;
	}

	// Overloaded Constructor
	public User(String first, String last, String email, String username, String password, char type) {
		this.firstName = first;
		this.lastName = last;
		this.email = email;
		this.password = password;
		this.username = username;
		this.accountID = genAccountID();
		this.accountType = type;
	}

	/**
	 * Generates Random 16 Digit Account ID
	 * Generated by randomly choosing either 1 or 2, and then adding a random letter or number to the id String, until
	 * 16 characters are reached.
	 */
	public String genAccountID() {
		// initializing variables
		String id = "";
		String[] alpha = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};
		int num, check;

		for (int i = 0; i < 16; i++) {
			// randomly generates either 1 or 2, do choose whether to put a letter or number next in the 16 character ID
			check = (int) (Math.random() * 2 + 1);
			if (check == 1) {
				num = (int) (Math.random() * 8 + 1); // randomly gets a number from 0 to 9
				id += num; // adds number to id string

			} else {
				num = (int) (Math.random() * 25 + 1); // randomly gets a number from 0 to 26
				id += alpha[num]; // add letter at the number to the id string
			}
		}
		return id; // returns user id
	}

	/**
	 * Getters
	 */
	public String getAccountID() {
		return accountID;
	}
	public String getFirstName() {
		return firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public String getEmail() {
		return email;
	}

	public String getPassword() {
		return password;
	}

	public String getUsername() {
		return username;
	}

	public char getAccountType() {
		return accountType;
	}

	/**
	 * Setters
	 */
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public void setAccountType(char type) {
		this.accountType = type;
	}

	/**
	 * Method to process my record and store it into the user in the format below
	 * username/password/accountID/accountType/firstName/lastName/email
	 */
	public void processString(String record) {
		String words[];
		words = record.split("/");

		this.username = words[0];
		this.password = words[1];
		this.accountID = words[2];   

		if (words[3].equalsIgnoreCase("p")) {
			this.accountType = 'p';
		} else {
			this.accountType = 'r';
		}

		this.firstName = words[4];
		this.lastName = words[5];
		this.email = words[6];

	}

	/**
	 * toString method
	 */
	public String toString() {
		return "User{" +
				"firstName='" + firstName + '\'' +
				", lastName='" + lastName + '\'' +
				", email='" + email + '\'' +
				", username='" + username + '\'' +
				", password='" + password + '\'' +
				", accountID='" + accountID + '\'' +
				", accountType='" + accountType + '\'' +
				'}';
	}

	/**
	 * Self Testing Main Method
	 * @param args
	 */
	public static void main(String[] args) {
		// Creating an instance using the default constructor
		User user1 = new User();

		// Setting attributes using setter methods
		user1.setFirstName("Tony");
		user1.setLastName("Campos");
		user1.setEmail("tony.campos@gmail.com");
		user1.setPassword("password123");
		user1.setUsername("tonycampos");
		user1.setAccountType('p'); // 'p' for Premium, 'r' for Regular

		// Printing information using toString()
		System.out.println("User 1 Information:");
		System.out.println(user1.toString());

		// Creating an instance using the overloaded constructor
		User user2 = new User("bob", "ross", "bob.ross@example.com", "bobross", "password456", 'r');

		// Printing information using toString()
		System.out.println("\nUser 2 Information:");
		System.out.println(user2.toString());

		// Testing the processString method
		String record = "test_user/test_password/123abc/p/Test/User/test@example.com";
		User user3 = new User();
		user3.processString(record);

		// Printing information using toString()
		System.out.println("\nUser 3 Information:");
		System.out.println(user3.toString());
	}

}
